---
title: "BHWI Report Dashboard"
output: 
   flexdashboard::flex_dashboard:
     orientation: rows
     vertical_layout: fill
     theme: cosmo
     source_code: embed
     self_contained: true
     css: styles.css
   pdf: default
runtime: shiny
editor: source
execute: 
  echo: false
  warning: false
  message: false
  error: false
---

```{r}
#| context: setup
#| label: setup
#| include: false

# -----------------------------------------------------------------------------
# 1. Setup/Dependencies (Package Manager)
# -----------------------------------------------------------------------------

if (!require("pacman")) {
  install.packages("pacman", repos = "[https://cran.rstudio.org](https://cran.rstudio.org)")
}
library(pacman)

p_load(
   here, 
   conflicted, 
   rio, 
   googledrive, 
   googlesheets4,
   shiny, 
   flexdashboard, 
   DT, 
   lubridate, 
   stringr, 
   showtext, 
   treemap, 
   tidyverse, 
   janitor
)

# -----------------------------------------------------------------------------
# 2. Conflict Resolution (After loading)
# -----------------------------------------------------------------------------

conflicts_prefer(
  dplyr::filter,
  dplyr::first,
  dplyr::summarize,
  dplyr::select,
  janitor::clean_names,
  janitor::chisq.test,
  lubridate::year,
  rio::export,
  tidyselect::starts_with
)

# -----------------------------------------------------------------------------
# 3. Global Options, Themes, and Table Settings
# -----------------------------------------------------------------------------

# Global Options
set.seed(13) # Random seed for reproducibility
options(scipen = 9999) # Large number for scientific notation preference

# gtsummary Themes
gtsummary::theme_gtsummary_journal(journal = "jama")
gtsummary::theme_gtsummary_compact()

# flextable Defaults (Font check!)
flextable::set_flextable_defaults(
  table.layout = "autofit",
  font.size = 10,
  font.family = "Times New Roman",
  padding.top = 0,
  padding.bottom = 0
)

# custom color palette
mchd_county_logo_blue = "#326195"
mchd_county_logo_green = "#48773C"
mchd_green = "#385D2F"
mchd_claret = "#8C183E"
mchd_deep_saffron = "#F79232"
mchd_copper_rose = "#9b6167"
mchd_light_cerulean = "#72CCD4"

perma_list <- c(
  "data_repo",
  "gis_repo",
  "mchd_claret",
  "mchd_copper_rose",
  "mchd_county_logo_blue",
  "mchd_county_logo_green",
  "mchd_deep_saffron",
  "mchd_green",
  "mchd_light_cerulean"
)

# Enable showtext for custom fonts
showtext::showtext_auto()

# -----------------------------------------------------------------------------
# 4. Google Authentication
# -----------------------------------------------------------------------------

# This is the key function for user authorization.
# It will open a browser window for the user to sign in
# if a valid token doesn't already exist.
# gs4_auth()

# You can optionally also use drive_auth() if you need to use the googledrive package
# to find a sheet by name or perform other Drive-related actions.
# The `googlesheets4` package works well with `googledrive`
# and can often use the same token.
# drive_auth()

# cat("### You are now logged in as:", gs4_user()$email)
```

```{r}
#| context: data
#| label: data
#| echo: false

# Read Google Sheet and Prepare Data
# -----------------------------------------------------------------------------

sheets_url <- "https://docs.google.com/spreadsheets/d/1lRMyvGBAXcUaQtmBxXDFyrs889L505OFRRyvC0zQJtg/edit?usp=drive_link"
my_sheet <- googledrive::drive_get(sheets_url)

# Read the raw data and immediately fix the misspelling
raw_data <- googlesheets4::read_sheet(my_sheet) %>%
  mutate(Race = str_replace(Race, "Black of African American", "Black or African American"))

# --- Grouping logic ---

# Create a temporary program_clean column to count frequencies
program_clean <- raw_data %>%
  mutate(program_clean = str_trim(str_extract(`Which program do you work in, or which program will this funding support? If it is funding for/training for multiple programs, please select all that apply. If it is funding for/training for an entire unit, just select that unit.`, "^[^,]+"))) %>%
  pull(program_clean)

# Find the top 9 programs from the cleaned data
top_9_programs <- raw_data %>%
  mutate(program_clean = str_trim(str_extract(`Which program do you work in, or which program will this funding support? If it is funding for/training for multiple programs, please select all that apply. If it is funding for/training for an entire unit, just select that unit.`, "^[^,]+"))) %>%
  count(program_clean) %>%
  arrange(desc(n)) %>%
  slice(1:9) %>%
  pull(program_clean)

# Find the top 5 races from the cleaned data
top_5_races <- raw_data %>%
  mutate(race_clean = str_trim(str_extract(`Race`, "^[^,]+"))) %>%
  count(race_clean) %>%
  arrange(desc(n)) %>%
  slice(1:5) %>%
  pull(race_clean)

# Find the top 5 gender identities from the cleaned data
top_5_genders <- raw_data %>%
  mutate(gender_clean = str_trim(str_extract(`Gender Identity`, "^[^,]+"))) %>%
  count(gender_clean) %>%
  arrange(desc(n)) %>%
  slice(1:5) %>%
  pull(gender_clean)

# Find the top 5 sexual orientations from the cleaned data
top_5_orientations <- raw_data %>%
  mutate(orientation_clean = str_trim(str_extract(`Sexual Orientation`, "^[^,]+"))) %>%
  count(orientation_clean) %>%
  arrange(desc(n)) %>%
  slice(1:5) %>%
  pull(orientation_clean)

# Group programs, race, gender, and sexual orientation into top N or 'Other' and then select final columns
data <- raw_data %>%
  mutate(
    # Date and fiscal quarter handling
    date = as.Date(Timestamp),
    fiscal_year_calc = if_else(month(date) < 7, year(date), year(date) + 1),
    fiscal_quarter = factor(
      paste0("FY", fiscal_year_calc, " Q", quarter(date, fiscal_start = 7)),
      levels = unique(paste0("FY", fiscal_year_calc, " Q", quarter(date, fiscal_start = 7)))
    ),
    
    # Program grouping
    program_group = if_else(
      str_trim(str_extract(`Which program do you work in, or which program will this funding support? If it is funding for/training for multiple programs, please select all that apply. If it is funding for/training for an entire unit, just select that unit.`, "^[^,]+")) %in% top_9_programs,
      str_trim(str_extract(`Which program do you work in, or which program will this funding support? If it is funding for/training for multiple programs, please select all that apply. If it is funding for/training for an entire unit, just select that unit.`, "^[^,]+")),
      "Other"
    ),
    
    # Race grouping
    race_group = if_else(
      str_trim(str_extract(`Race`, "^[^,]+")) %in% top_5_races,
      str_trim(str_extract(`Race`, "^[^,]+")),
      "Other"
    ),
    
    # Gender grouping
    gender_group = if_else(
      str_trim(str_extract(`Gender Identity`, "^[^,]+")) %in% top_5_genders,
      str_trim(str_extract(`Gender Identity`, "^[^,]+")),
      "Other"
    ),
    
    # Sexual orientation grouping
    sexual_orientation_group = if_else(
      str_trim(str_extract(`Sexual Orientation`, "^[^,]+")) %in% top_5_orientations,
      str_trim(str_extract(`Sexual Orientation`, "^[^,]+")),
      "Other"
    )
  ) %>%
  filter(!is.na(date)) %>%
  select(
    status = `Approval Status`,
    date,
    fiscal_quarter,
    race = `Race`,
    race_group,
    gender_identity = `Gender Identity`,
    gender_group,
    sexual_orientation = `Sexual Orientation`,
    sexual_orientation_group,
    funding_for = `Please select the item you are requesting funding for:`,
    program = `Which program do you work in, or which program will this funding support? If it is funding for/training for multiple programs, please select all that apply. If it is funding for/training for an entire unit, just select that unit.`,
    program_group,
    managers_approval = `Have you received your supervisor's or manager's approval for this request?`,
    represented_status = `Union/Representation Status of staff receiving/using the funding`,
    amount_approved = `Amount Approved`
  )

# Read and clean the funding data
funding <- googlesheets4::read_sheet(my_sheet,
                                         sheet = "Funding Tracking",
                                         range = "A5:E",
                                         col_types = "ccccn") %>%
  select(
    date = `Date Funding was approved or Invoice received`,
    staff = `Staff using funding`,
    represented_status = `Represented Status`,
    approved_for = `Approved for`,
    amount_approved = `Amount Approved`
  ) %>%
  filter(!is.na(date)) %>%
  mutate(
    date = mdy(date),
    fiscal_year_calc = if_else(month(date) < 7, year(date), year(date) + 1),
    fiscal_quarter = factor(
      paste0("FY", fiscal_year_calc, " Q", quarter(date, fiscal_start = 7)),
      levels = unique(paste0("FY", fiscal_year_calc, " Q", quarter(date, fiscal_start = 7)))
    )
  )
```

# Home

## {.sidebar}

```{r}
#| label: home-inputs
#| context: interactive

selectizeInput(
                inputId = "fiscal_quarter",
                label = "Select Fiscal Quarter(s):",
                # Add "All" to the list of choices
                choices = c("All", as.character(sort(unique(data$fiscal_quarter)))),
                # Select "All" by default
                selected = "All",
                multiple = TRUE
            )
```

```{r}
#| context: interactive

data_filtered <- reactive({
  req(input$fiscal_quarter) # Ensure input is available
   if ("All" %in% input$fiscal_quarter) {
    return(data)
   } else {
  data %>%
    filter(fiscal_quarter %in% input$fiscal_quarter) 
   }
})

funding_filtered <- reactive({
  req(input$fiscal_quarter) # Ensure input is available
  if ("All" %in% input$fiscal_quarter) {
    return(funding)
  } else {
  funding %>%
    filter(fiscal_quarter %in% input$fiscal_quarter)
  }
})
```

## Row {height="20%"}

### Column {width="30%"}

```{r}
#| label: valuebox-total
#| content: valuebox

# Calculate Overall Applications
renderValueBox({
  total_applications <- nrow(data_filtered())
  valueBox(
    value = total_applications,
    caption = "Total Applications",
    icon = "fa-solid fa-file-invoice",
    color = "#326195"
  )
})
```

### Column {width="30%"}

```{r}
#| label: valuebox-approval-rate
#| content: valuebox

# Calculate Approval %
renderValueBox({
  approved_applications <- data_filtered() %>% filter(status == "Approved")
  if (nrow(data_filtered()) > 0) {
    approval_rate <- nrow(approved_applications) / nrow(data_filtered()) * 100
  } else {
    approval_rate <- 0
  }
  valueBox(
    value = paste0(round(approval_rate, 1), "%"),
    caption = "Approval Rate",
    icon = "fa-solid fa-check-to-slot",
    color = "#48772C"
  )
})
```

### Column {width="30%"}

```{r}
#| label: valuebox-funding
#| content: valuebox

# Calculate Total Funding
renderValueBox({
  total_funding <- sum(funding_filtered()$amount_approved, na.rm = TRUE)
  
  total_funding
  
  valueBox(
    value = paste0("$", formatC(total_funding, format = "f", big.mark = ",", digits = 0)),
    caption = "Total Funding",
    icon = "fa-solid fa-dollar-sign",
    color = "#9b6167"
  )
})
```

## Row

```{r}
#| label: chart-approved 

renderPlot({
 # This filters for approved applications and then counts them by program group.
 approved_data <- data_filtered() %>%
  filter(status == "Approved") %>%
  mutate(
     program_abb = case_when(
       program_group == "Adult Protective Services and Risk Case Management" ~ "APS&RCM",
       program_group == "Call Center/Crisis Services" ~ "CC/CS",
       program_group == "CMHP - Safety Net Services Unit" ~ "CMHP: SNS",
       program_group == "Direct Clinical Services Unit" ~ "DCS",
       program_group == "Early Assessment and Support Alliance (EASA)" ~ "EASA",
       program_group == "Early Childhood Services (EC)" ~ "EC",
       program_group == "Other" ~ "Other",
       program_group == "Quality Management Unit" ~ "QM",
       program_group == "School Based Mental Health (SBMH)" ~ "SBMH", 
       program_group == "Wraparound" ~ "Wrap"
     )
  ) %>%
  group_by(program_abb) %>%
  summarise(count = n(), .groups = 'drop') %>%
  mutate(total_count = sum(count)) %>%
  mutate(percentage = (count / total_count) * 100) %>%
  mutate(program_pct = str_glue("{program_abb} \n({round(percentage, 1)}%)")) %>%
  select(-total_count) %>%
  filter(count > 0)

 # Now, we use the treemap() function to create the visualization.
 treemap(
  # The data frame we just created
  dtf = approved_data,
  # The 'index' is the column with the categories we want to display
  index = "program_pct",
  # 'vSize' is the column that determines the size of each rectangle
  vSize = "count",
  # 'type' defines the coloring scheme; "index" colors by category
  type = "index",
  # The title for the plot
  title = "Application Approvals by Program",
  # Customizing the colors and borders
  palette = adjustcolor(
    col = c("#326195", "#48773C", "#8C183E", "#F79232", "#9b6167", "#72CCD4"),
    alpha.f = 0.6),
  border.col = "white",
  border.lwds = 2,
  # Customizing the labels
  fontsize.labels = 14,
  fontcolor.labels = "white",
  fontface.labels = 2, # 1 - Normal, 2 - Bold labels
  fontfamily.labels = "sans", 
  bg.labels = "transparent",
  align.labels = c("center", "center"),
  inflate.labels = FALSE, 
  aspRatio = 1.5
 )
})
```




